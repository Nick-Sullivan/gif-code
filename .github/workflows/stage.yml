name: "Stage"

on:
  push:
    branches: ["stage"]

env:
  IS_CICD: "true"
  ENVIRONMENT: "stage"
  TAG: "1.0.${{github.run_number}}"
  FLUTTER_VERSION: "1.0.${{github.run_number}}+${{github.run_number}}"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create_tag:
    name: "Create tag"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: "Create tag"
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: ${{env.TAG}}

  detect_changes:
    name: "Detect changes"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      server: ${{ steps.filter.outputs.server }}
      app: ${{ steps.filter.outputs.app }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: production
          filters: |
            server:
              - 'server/**'
            app:
              - 'app/**'

      - name: Echo outputs app
        run: echo ${{ steps.filter.outputs.app }}

      - name: Echo outputs server
        run: echo ${{ steps.filter.outputs.app }}

  deploy_infrastructure:
    name: "Deploy infrastructure"
    needs: [detect_changes]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_changes.outputs.server == 'true' }}
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialise terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform init -backend-config "key=gif_code/${{env.ENVIRONMENT}}/foundation/terraform.tfstate"

      - name: Apply terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}" -var="giphy_api_key=${{secrets.GIPHY_API_KEY}}"

      - name: Initialise terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform init -backend-config "key=gif_code/${{env.ENVIRONMENT}}/infrastructure/terraform.tfstate"

      - name: Build libs (infrastructure)
        working-directory: server/lambda/libs
        run: pip install -r requirements.txt --target python

      - name: Apply terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

  api_tests:
    name: "API tests"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server api tests
        working-directory: server
        run: pytest tests/api

  build_app:
    name: "Build flutter app"
    needs: [deploy_infrastructure, detect_changes]
    if: ${{ needs.detect_changes.outputs.app == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.0"
          channel: "stable"
          cache: true

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Get dependencies
        working-directory: app/qr_gif
        run: flutter pub get

      - name: Initialise terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform init -backend-config "key=gif_code_app/${{env.ENVIRONMENT}}/infrastructure/terraform.tfstate"

      - name: Apply terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.GOOGLE_PLAY_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > app/qr_gif/android/key.properties
          echo "storePassword=${{ secrets.GOOGLE_PLAY_KEYSTORE_PASSWORD }}" >> app/qr_gif/android/key.properties
          echo "keyPassword=${{ secrets.GOOGLE_PLAY_KEYSTORE_PASSWORD }}" >> app/qr_gif/android/key.properties
          echo "keyAlias=${{ secrets.GOOGLE_PLAY_KEYSTORE_ALIAS }}" >> app/qr_gif/android/key.properties

      - name: Update version in YAML
        working-directory: app/qr_gif
        run: |
          echo "version: ${{env.FLUTTER_VERSION}}" >> pubspec.yaml

      - name: Build appbundle
        working-directory: app/qr_gif
        run: flutter build appbundle

      - name: Save Android bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: app/qr_gif/build/app/outputs/bundle/release/app-release.aab

  deploy_app:
    name: "Deploy flutter app"
    needs: [build_app]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Load Android build
        uses: actions/download-artifact@v4
        with:
          name: android-release

      # To create a key, follow instructions at https://github.com/r0adkll/upload-google-play
      - name: Deploy to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_KEY }}
          packageName: com.gif_code
          releaseFiles: app-release.aab
          track: internal
          status: complete

  # merge_to_prod:
  #   name: "Merge to production"
  #   needs: [api_tests, deploy_app]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Create PR
  #       id: cpr
  #       run: |
  #         PR_URL=$(gh pr create --base production --title "Production deployment" --body "This was automatically generated by the stage pipeline.")
  #         echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
  #       env:
  #         GITHUB_TOKEN: ${{secrets.AUTOMERGE_PR_TOKEN}}

  #     - name: Approve PR
  #       run: gh pr review --approve "$PR_URL"
  #       env:
  #         PR_URL: ${{ steps.cpr.outputs.pr_url }}
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  #     - name: Mark PR to auto-merge when ready
  #       run: gh pr merge --auto --merge "$PR_URL"
  #       env:
  #         PR_URL: ${{ steps.cpr.outputs.pr_url }}
  #         GITHUB_TOKEN: ${{secrets.AUTOMERGE_PR_TOKEN}}
