name: "Stage"

on:
  push:
    branches: ["main"]

env:
  IS_CICD: "true"

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create_tag:
    name: "Create tag"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    defaults:
      run:
        shell: bash
    outputs:
      build_number: ${{ steps.buildnumber.outputs.build_number }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}

      - name: "Create unique tag"
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: "1.0.${{steps.buildnumber.outputs.build_number}}"

      - name: "Create staging tag"
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: stage

  deploy_infrastructure:
    name: "Deploy infrastructure"
    needs: [create_tag]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialise terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform init -backend-config "key=gif_code/stage/foundation/terraform.tfstate"

      - name: Apply terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform apply -auto-approve -var="environment=stage" -var="giphy_api_key=${{secrets.GIPHY_API_KEY}}"

      - name: Initialise terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform init -backend-config "key=gif_code/stage/infrastructure/terraform.tfstate"

      - name: Build libs (infrastructure)
        working-directory: server/lambda/libs
        run: pip install -r requirements.txt --target python

      - name: Apply terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=stage"

  api_tests:
    name: "API tests"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server api tests
        working-directory: server
        run: |
          export ENVIRONMENT=stage
          pytest tests/api

  flutter_tests:
    name: "Flutter tests"
    needs: [deploy_infrastructure]
    runs-on: windows-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.4"
          channel: "stable"
          cache: true

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialise terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform init -backend-config "key=gif_code_app/stage/infrastructure/terraform.tfstate"

      - name: Apply terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=stage"

      - name: Get dependencies
        working-directory: app/qr_gif
        run: |
          flutter clean
          flutter pub get

      - name: Run tests
        working-directory: app/qr_gif
        run: |
          flutter config --enable-windows-desktop
          flutter test -d windows integration_test/main_test.dart --dart-define=IS_TESTING=true

  build_app:
    name: "Build app"
    needs: [create_tag, deploy_infrastructure, flutter_tests, api_tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "21"
          cache: "gradle"

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.4"
          channel: "stable"
          cache: true

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Get dependencies
        working-directory: app/qr_gif
        run: |
          flutter clean
          flutter pub get

      - name: Initialise terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform init -backend-config "key=gif_code_app/stage/infrastructure/terraform.tfstate"

      - name: Apply terraform state (infrastructure)
        working-directory: app/qr_gif/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=stage"

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.GOOGLE_PLAY_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > app/qr_gif/android/key.properties
          echo "storePassword=${{ secrets.GOOGLE_PLAY_KEYSTORE_PASSWORD }}" >> app/qr_gif/android/key.properties
          echo "keyPassword=${{ secrets.GOOGLE_PLAY_KEYSTORE_PASSWORD }}" >> app/qr_gif/android/key.properties
          echo "keyAlias=${{ secrets.GOOGLE_PLAY_KEYSTORE_ALIAS }}" >> app/qr_gif/android/key.properties

      - name: Create flutter version
        id: version
        run: echo "FLUTTER_BUILD=$VERSION" >> $GITHUB_OUTPUT
        env:
          VERSION: 1.0.${{needs.create_tag.outputs.build_number}}+${{needs.create_tag.outputs.build_number}}

      - name: Update version in YAML
        working-directory: app/qr_gif
        run: |
          echo "version: ${{steps.version.outputs.FLUTTER_BUILD}}" >> pubspec.yaml

      - name: Build appbundle
        working-directory: app/qr_gif
        run: flutter build appbundle

      - name: Save Android bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{steps.version.outputs.FLUTTER_BUILD}}
          path: app/qr_gif/build/app/outputs/bundle/release/app-release.aab

  deploy_app:
    name: "Deploy app"
    needs: [create_tag, build_app, api_tests, flutter_tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Create flutter version
        id: version
        run: echo "FLUTTER_BUILD=$VERSION" >> $GITHUB_OUTPUT
        env:
          VERSION: 1.0.${{needs.create_tag.outputs.build_number}}+${{needs.create_tag.outputs.build_number}}

      - name: Load Android build
        uses: actions/download-artifact@v4
        with:
          name: android-release-${{steps.version.outputs.FLUTTER_BUILD}}

      # To create a key, follow instructions at https://github.com/r0adkll/upload-google-play
      # Internal track publishes immediately, closed and higher require review from Google play
      - name: Deploy to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_KEY }}
          packageName: com.gif_code
          releaseFiles: app-release.aab
          track: internal # internal,alpha(closed),beta(open),production
          status: completed

  # Some steps that I've decided to ignore for now, but might add later

  # detect_changes:
  #   name: "Detect changes"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 1
  #   outputs:
  #     server: ${{ steps.filter.outputs.server }}
  #     app: ${{ steps.filter.outputs.app }}
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         base: ${{ github.ref }}
  #         filters: |
  #           server:
  #             - 'server/**'
  #           app:
  #             - 'app/**'

  #     - name: Are there changes to the app?
  #       run: echo ${{ steps.filter.outputs.app }}

  #     - name: Are there changes to the server?
  #       run: echo ${{ steps.filter.outputs.server }}

  # trying an emulator
  # flutter_tests:
  #   name: "Flutter tests"
  #   needs: [deploy_infrastructure]
  #   runs-on: macos-latest
  #   timeout-minutes: 30
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Setup flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "3.10.0"
  #         channel: "stable"
  #         cache: true

  #     - name: Setup AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: "ap-southeast-2"

  #     - name: Setup terraform
  #       uses: hashicorp/setup-terraform@v3

  #     - name: Initialise terraform state (infrastructure)
  #       working-directory: app/qr_gif/terraform/infrastructure
  #       run: terraform init -backend-config "key=gif_code_app/stage/infrastructure/terraform.tfstate"

  #     - name: Apply terraform state (infrastructure)
  #       working-directory: app/qr_gif/terraform/infrastructure
  #       run: terraform apply -auto-approve -var="environment=stage"

  #     - name: Get dependencies
  #       working-directory: app/qr_gif
  #       run: flutter pub get

  #     - uses: futureware-tech/simulator-action@v3
  #       with:
  #         model: "iPhone 14"

  #     - name: Run tests
  #       working-directory: app/qr_gif
  #       run: flutter test integration_test --dart-define=IS_TESTING=true
