name: "Stage"

on:
  push:
    branches: ["stage"]

env:
  IS_CICD: "true"
  ENVIRONMENT: "stage"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # deploy_infrastructure:
  #   name: "Deploy infrastructure"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Setup AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: "ap-southeast-2"

  #     - name: Setup terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Initialise terraform state (foundation)
  #       working-directory: server/terraform/foundation
  #       run: terraform init -backend-config "key=gif_code/${{env.ENVIRONMENT}}/foundation/terraform.tfstate"

  #     - name: Apply terraform state (foundation)
  #       working-directory: server/terraform/foundation
  #       run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}" -var="giphy_api_key=${{secrets.GIPHY_API_KEY}}"

  #     - name: Initialise terraform state (infrastructure)
  #       working-directory: server/terraform/infrastructure
  #       run: terraform init -backend-config "key=gif_code/${{env.ENVIRONMENT}}/infrastructure/terraform.tfstate"

  #     - name: Build libs (infrastructure)
  #       working-directory: server/lambda/libs
  #       run: pip install -r requirements.txt --target python

  #     - name: Apply terraform state (infrastructure)
  #       working-directory: server/terraform/infrastructure
  #       run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

  # api_tests:
  #   name: "API Tests"
  #   needs: [deploy_infrastructure]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Setup AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: "ap-southeast-2"

  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"
  #         cache-dependency-path: server/requirements.txt

  #     - name: Install server libraries
  #       run: pip install -r server/requirements.txt

  #     - name: Run server api tests
  #       working-directory: server
  #       run: pytest tests/api

  merge_to_prod:
    name: "PR to prod"
    # needs: [api_tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      # - name: Create Pull Request
      #   id: cpr
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     base: production
      #     branch: stage
      #     title: "Deploy to production"
      #     token: ${{secrets.GITHUB_TOKEN}}

      - name: Create PR
        id: cpr
        run: |
          PR_URL=$(gh pr create --base production --title "Production deployment" --body "This was automatically generated.")
          echo "::set-output name=pr_url::$PR_URL"
        env:
          GITHUB_TOKEN: ${{secrets.AUTOMERGE_PR_TOKEN}}

      - name: Approve PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ steps.cpr.outputs.pr_url }}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Mark PR to auto-merge when ready
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ steps.cpr.outputs.pr_url }}
          GITHUB_TOKEN: ${{secrets.AUTOMERGE_PR_TOKEN}}
